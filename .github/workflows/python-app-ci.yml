# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions


name: GitHub Actions for keripy
on:
  push:
    branches:
      - 'main'
      - 'development'
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.4
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest hio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint changes
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --ignore=E7,F841,E301,E302,E303 --max-complexity=10 --max-line-length=127 --statistics
      - name: Run core KERI tests
        run: |
          pytest tests/ --ignore tests/demo/ --ignore test/scripts
      - name: Run KERI demo tests
        run: |
          pytest tests/demo/

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.4
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov hio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run core KERI tests
        run: |
          pytest --cov=./ --cov-report=xml
      - name: Upload
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  scripts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10.4
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.4
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov hio pytest-shell
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run KERI kli tests
        run: |
          ./scripts/demo/test_scripts.sh

  interop-setup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/interop'
    outputs:
      CACHE_KEY_INTEROP: ${{ steps.cache.outputs.CACHE_KEY_INTEROP }}
      GITHUB_REPOSITORY_NAME: ${{ steps.cache.outputs.GITHUB_REPOSITORY_NAME }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Set outputs
        id: cache
        run: |
          echo "::set-output name=CACHE_KEY_INTEROP::${{ hashFiles('.github/workflows/interop/Dockerfile') }}"
          echo "::set-output name=GITHUB_REPOSITORY_NAME::$(echo ${GITHUB_REPOSITORY,,})"

  build-interop-image:
    needs: [ interop-setup, test ]
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_INTEROP: ${{ needs.interop-setup.outputs.CACHE_KEY_INTEROP }}
      GITHUB_REPOSITORY_NAME: ${{ needs.interop-setup.outputs.GITHUB_REPOSITORY_NAME }}
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: interop
        run: |
          echo ${{ secrets.CR_PAT }} | docker login ghcr.io --username ${{ secrets.CR_USER }} --password-stdin
          docker build -f .github/workflows/interop/Dockerfile --no-cache -t ${{ env.GITHUB_REPOSITORY_NAME }}/keripy-interop:${{ env.CACHE_KEY_INTEROP }} .
          docker tag ${{ env.GITHUB_REPOSITORY_NAME }}/keripy-interop:${{ env.CACHE_KEY_INTEROP }} ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/keripy-interop:latest
          docker push ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/keripy-interop:latest
          mkdir -p ${GITHUB_WORKSPACE}/cache
          touch ${GITHUB_WORKSPACE}/cache/${{ env.CACHE_KEY_INTEROP }}
