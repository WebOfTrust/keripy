# -*- encoding: utf-8 -*-
"""
KERI
keri.app.habbing module

"""
import json
import os
from contextlib import contextmanager
from urllib.parse import urlsplit

from hio.base import doing
from hio.core import wiring
from hio.core.tcp import clienting, serving
from hio.help import hicting

from . import keeping, configing, directing
from .. import help
from .. import kering
from ..core import coring, eventing, parsing, routing
from ..core.coring import Serder
from ..db import dbing, basing
from ..db.dbing import snKey, dgKey
from ..kering import ValidationError, MissingSignatureError

logger = help.ogler.getLogger()

SALT = '0AMDEyMzQ1Njc4OWFiY2RlZg'  # coring.Salter(raw=b'0123456789abcdef').qb64


@contextmanager
def openHby(*, name="test", base="", temp=True, salt=SALT, **kwa):
    """
    Context manager wrapper for Habery instance.
    Context 'with' statements call .close on exit of 'with' block

    Parameters:
        name (str): name of habery and shared db and file path
        base (str): optional if "" path component of shared db and files.
        temp (bool): True means use temporary or limited resources testing.
            Store .ks, .db, and .cf in /tmp
            Use quick method to stretch salts for seeds such as
                bran salt to seed or key creation of Habs.
                Otherwise use more resources set by tier to stretch
        salt (str): qb64 salt for creating key pairs

    Parameters: Passed through via kwa
        ks (Keeper):  keystore lmdb subclass instance
        db (Baser): database lmdb subclass instance
        cf (Configer): config file instance
        seed (str): qb64 private-signing key (seed) for the aeid from which
            the private decryption key may be derived. If aeid stored in
            database is not empty then seed may required to do any key
            management operations. The seed value is memory only and MUST NOT
            be persisted to the database for the manager with which it is used.
            It MUST only be loaded once when the process that runs the Manager
            is initialized. Its presence acts as an authentication, authorization,
            and decryption secret for the Manager and must be stored on
            another device from the device that runs the Manager.
        aeid (str): qb64 of non-transferable identifier prefix for
            authentication and encryption of secrets in keeper. If provided
            aeid (not None) and different from aeid stored in database then
            all secrets are re-encrypted using new aeid. In this case the
            provided prikey must not be empty. A change in aeid should require
            a second authentication mechanism besides the prikey.
        bran (str): Base64 22 char string that is used as base material for
            seed. bran allows alphanumeric passcodes generated by key managers
            like 1password to be key store for seed.
        pidx (int): Initial prefix index for vacuous ks
        algo (str): algorithm (randy or salty) for creating key pairs
            default is root algo which defaults to salty
        tier (str): security tier for generating keys from salt (Tierage)
        free (boo): free resources by closing on Doer exit if any

    """
    habery = None
    try:
        habery = Habery(name=name, base=base, temp=temp, salt=salt, **kwa)
        yield habery

    finally:
        if habery:
            habery.close(clear=habery.temp)


@contextmanager
def openHab(name="test", base="", salt=b'0123456789abcdef', temp=True, cf=None, **kwa):
    """
    Context manager wrapper for Hab instance.
    Defaults to temporary resources
    Context 'with' statements call .close on exit of 'with' block

    Parameters:
        name(str): name of habitat to create
        base(str): the name used for shared resources i.e. Baser and Keeper The habitat specific config file will be
        in base/name
        salt(bytes): passed to habitat to use for inception raw salt
        temp(bool): indicates if this uses temporary databases
        cf(Configer): optional configer for loading configuration data

    """

    salt = coring.Salter(raw=salt).qb64

    with openHby(name=name, base=base, salt=salt, temp=temp, cf=cf) as hby:
        if (hab := hby.habByName(name)) is None:
            hab = hby.makeHab(name=name, icount=1, isith=1, ncount=1, nsith=1, **kwa)

        yield hby, hab


def setupHabery(name="who", base="main", temp=False, curls=None, remote="eve", iurls=None):
    """
    Setup and return doers list to run controller

    Parameters:
        name(str): is the name used for a specific habitat
        base(str) is the name used for shared resources i.e. Baser and Keeper
               The habitat specific config file will be in base/name
        temp(bool): True creates Habery in temp directory
        curls (list[str]): local controller's service endpoint urls
        remote (str): name of remote direct mode target
        iurls (list[str]):  oobi  urls

    Load endpoint database with named target urls including http not just tcp


    conf file json
    {
      dt: "isodatetime",
      curls: ["tcp://localhost:5620/"],
      iurls: ["tcp://localhost:5621/?name=eve"],
    }
    """

    if not curls:
        curls = ["ftp://localhost:5620/"]

    if not iurls:  # blind oobi
        iurls = [f"ftp://localhost:5621/?role={kering.Roles.peer}&name={remote}"]

    # setup databases  for dependency injection and config file
    ks = keeping.Keeper(name=base, temp=temp)  # not opened by default, doer opens
    ksDoer = keeping.KeeperDoer(keeper=ks)  # doer do reopens if not opened and closes
    db = basing.Baser(name=base, temp=temp)  # not opened by default, doer opens
    dbDoer = basing.BaserDoer(baser=db, reload=True)  # doer do reopens if not opened and closes
    cf = configing.Configer(name=name, base=base, temp=temp)
    cfDoer = configing.ConfigerDoer(configer=cf)
    conf = cf.get()
    if not conf:  # setup config file
        conf = dict(dt=help.nowIso8601(), curls=curls, iurls=iurls)
        cf.put(conf)

    # setup habery
    hby = Habery(name=name, base=base, ks=ks, db=db, cf=cf, temp=temp)
    hbyDoer = HaberyDoer(habery=hby)  # setup doer

    # setup wirelog to create test vectors
    path = os.path.dirname(__file__)
    path = os.path.join(path, 'logs')
    wl = wiring.WireLog(samed=True, filed=True, name=name, prefix='keri',
                        reopen=True, headDirPath=path)
    wireDoer = wiring.WireLogDoer(wl=wl)  # setup doer

    localPort = 5620
    remotePort = 5621
    # setup local directmode tcp server
    server = serving.Server(host="", port=localPort, wl=wl)
    serverDoer = serving.ServerDoer(server=server)  # setup doer
    directant = directing.Directant(hab=hby, server=server)
    # Reactants created on demand by directant

    # setup default remote direct mode client to remote party
    client = clienting.Client(host='127.0.0.1', port=remotePort, wl=wl)
    clientDoer = clienting.ClientDoer(client=client)  # setup doer
    director = directing.Director(hab=hby, client=client, tock=0.125)
    reactor = directing.Reactor(hab=hby, client=client)

    logger.info("\nController resources at %s/%s\nListening on TCP port %s to "
                "port %s.\n\n", hby.base, hby.name, localPort, remotePort)

    return [ksDoer, dbDoer, cfDoer, hbyDoer, wireDoer, clientDoer, director, reactor,
            serverDoer, directant]


class Habery:
    """Habery class provides shared database environments for all its Habitats
    Key controller and identifier controller shared configuration file, keystore
    and KEL databases.


    Attributes:
        name (str): name of associated databases
        base (str): optional directory path segment inserted before name
                    that allows further hierarchical differentation of databases.
                    "" means optional.
        temp (bool): True for testing:
            temporary storage of databases and config file
            weak resources for stretch of salty key

        ks (keeping.Keeper): lmdb key store
        db (basing.Baser): lmdb data base for KEL etc
        cf (configing.Configer): config file instance
        mgr (keeping.Manager): creates and rotates keys in key store
        rtr (routing.Router): routes reply 'rpy' messages
        rvy (routing.Revery): factory that processes reply 'rpy' messages
        kvy (eventing.Kevery): factory for local processing of local event msgs
        psr (parsing.Parser):  parses local messages for .kvy .rvy

        habs (dict): Hab instances keyed by prefix.
            To look up Hab by name get prefix from db.habs .prefix field using
            .habByName

        inited (bool): True means fully initialized wrt databases.
                          False means not yet fully initialized

    Properties:
        kevers (dict): of eventing.Kever(s) keyed by qb64 prefix
        prefixes (OrderedSet): local prefixes for .db

    """

    def __init__(self, *, name='test', base="", temp=False,
                 ks=None, db=None, cf=None, clear=False, headDirPath=None, **kwa):
        """
        Initialize instance.

        Parameters:
            name (str): alias name for shared environment config databases etc.
            base (str): optional directory path segment inserted before name
                that allows further differentation with a hierarchy. "" means
                optional.
            temp (bool): True means use temporary or limited resources testing.
                Store .ks, .db, and .cf in /tmp
                Use quick method to stretch salts for seeds such as
                    bran salt to seed or key creation of Habs.
                    Otherwise use more resources set by tier to stretch
            ks (Keeper):  keystore lmdb subclass instance
            db (Baser): database lmdb subclass instance
            cf (Configer): config file instance
            clear (bool): True means remove resource directory upon close when
                            reopening
                          False means do not remove directory upon close when
                            reopening
            headDirPath (str): directory override


        Parameters: Passed through via kwa to setup for later init
            seed (str): qb64 private-signing key (seed) for the aeid from which
                the private decryption key may be derived. If aeid stored in
                database is not empty then seed may required to do any key
                management operations. The seed value is memory only and MUST NOT
                be persisted to the database for the manager with which it is used.
                It MUST only be loaded once when the process that runs the Manager
                is initialized. Its presence acts as an authentication, authorization,
                and decryption secret for the Manager and must be stored on
                another device from the device that runs the Manager.
            aeid (str): qb64 of non-transferable identifier prefix for
                authentication and encryption of secrets in keeper. If provided
                aeid (not None) and different from aeid stored in database then
                all secrets Haberyare re-encrypted using new aeid. In this case the
                provided prikey must not be empty. A change in aeid should require
                a second authentication mechanism besides the prikey.
            bran (str): Base64 22 char string that is used as base material for
                seed. bran allows alphanumeric passcodes generated by key managers
                like 1password to be key store for seed.
            pidx (int): Initial prefix index for vacuous ks
            algo (str): algorithm (randy or salty) for creating key pairs
                default is root algo which defaults to salty
            salt (str): qb64 salt for creating key pairs
            tier (str): security tier for generating keys from salt (Tierage)
            free (boo): free resources by closing on Doer exit if any
            temp (bool): See above
        """
        self.name = name
        self.base = base
        self.temp = temp

        self.ks = ks if ks is not None else keeping.Keeper(name=self.name,
                                                           base=self.base,
                                                           temp=self.temp,
                                                           reopen=True,
                                                           clear=clear,
                                                           headDirPath=headDirPath)
        self.db = db if db is not None else basing.Baser(name=self.name,
                                                         base=self.base,
                                                         temp=self.temp,
                                                         reopen=True,
                                                         clear=clear,
                                                         headDirPath=headDirPath)
        self.cf = cf if cf is not None else configing.Configer(name=self.name,
                                                               base=self.base,
                                                               temp=self.temp,
                                                               reopen=True,
                                                               clear=clear)

        self.mgr = None  # wait to setup until after ks is known to be opened
        self.rtr = routing.Router()
        self.rvy = routing.Revery(db=self.db, rtr=self.rtr)
        self.kvy = eventing.Kevery(db=self.db, lax=False, local=True, rvy=self.rvy)
        self.kvy.registerReplyRoutes(router=self.rtr)
        self.psr = parsing.Parser(framed=True, kvy=self.kvy, rvy=self.rvy)
        self.habs = {}  # empty .habs

        self.inited = False

        # save init kwy word arg parameters as ._inits in order to later finish
        # init setup elseqhere after databases are opened if not below
        self._inits = kwa
        self._inits['temp'] = temp  # add temp for seed from bran tier override

        if self.db.opened and self.ks.opened:
            self.setup(**self._inits)  # finish setup later

    def setup(self, *, seed=None, aeid=None, bran=None, pidx=None, algo=None,
              salt=None, tier=None, free=False, temp=None, ):
        """
        Setup Habery. Assumes that both .db and .ks have been opened.
        This allows dependency injection of .db and .ks into Habery instance
        prior to .db and .kx being opened to accomodate asynchronous process
        setup of these resources. Putting the .db and .ks associated
        initialization here enables asynchronous opening .db and .ks after
        Baser and Keeper instances are instantiated. First call to .setup will
        initialize databases (vacuous initialization).

        Parameters:
            seed (str): qb64 private-signing key (seed) for the aeid from which
                the private decryption key may be derived. If aeid stored in
                database is not empty then seed may required to do any key
                management operations. The seed value is memory only and MUST NOT
                be persisted to the database for the manager with which it is used.
                It MUST only be loaded once when the process that runs the Manager
                is initialized. Its presence acts as an authentication, authorization,
                and decryption secret for the Manager and must be stored on
                another device from the device that runs the Manager.
            aeid (str): qb64 of non-transferable identifier prefix for
                authentication and encryption of secrets in keeper. If provided
                aeid (not None) and different from aeid stored in database then
                all secrets are re-encrypted using new aeid. In this case the
                provided prikey must not be empty. A change in aeid should require
                a second authentication mechanism besides the prikey.
            bran (str): Base64 22 char string that is used as base material for
                seed. bran allows alphanumeric passcodes generated by key managers
                like 1password to be  Okey store for seed.
            pidx (int): Initial prefix index for vacuous ks
            algo (str): algorithm (randy or salty) for creating key pairs
                default is root algo which defaults to salty
            salt (str): qb64 salt for creating key pairs
            tier (str): security tier for generating keys from salt (Tierage)
            free (boo): free resources by closing on Doer exit if any
            temp (bool): True means use shortcuts for testing.
                    Use quick method to stretch salts for seeds such as
                    bran salt to seed or key creation of Habs.
                    Otherwise use more resources set by tier to stretch
        """
        if not (self.ks.opened and self.db.opened):
            raise kering.ClosedError("Attempt to setup Habitat with closed "
                                     "database, .ks or .db.")
        self.free = True if free else False

        if bran and not seed:  # create seed from stretch of bran as salt
            if len(bran) < 22:
                raise ValueError(f"Bran (passcode seed material) too short.")
            bran = coring.MtrDex.Salt_128 + bran[:22]  # qb64 salt for seed
            signer = coring.Salter(qb64=bran).signer(transferable=False,
                                                     tier=tier,
                                                     temp=temp)
            seed = signer.qb64
            if not aeid:  # aeid must not be empty event on initial creation
                aeid = signer.verfer.qb64  # lest it remove encryption

        if salt is None:  # salt for signing keys not aeid seed
            salt = SALT
        else:
            salt = coring.Salter(qb64=salt).qb64

        try:
            self.mgr = keeping.Manager(ks=self.ks, seed=seed, aeid=aeid, pidx=pidx,
                                       algo=algo, salt=salt, tier=tier)
        except kering.AuthError as ex:
            self.close()
            raise ex

        self.loadHabs()
        self.inited = True

    def loadHabs(self):
        """Load Habs instance from db

        .db.reopen calls .db.reload which loads .db.kevers from key state in
        .db.states and loads  associated .db.prefixes.
        It also removes any bare .habs without key state
        Thus by now know that .habs are valid so can create Hab instances

        """
        self.reconfigure()  # pre hab load reconfiguration

        groups = []
        for name, habord in self.db.habs.getItemIter():
            name, = name  # detupleize the database key name
            pre = habord.prefix

            # create Hab instance and inject dependencies
            hab = Hab(ks=self.ks, db=self.db, cf=self.cf, mgr=self.mgr,
                      rtr=self.rtr, rvy=self.rvy, kvy=self.kvy, psr=self.psr,
                      name=name, pre=pre, temp=self.temp, aids=habord.aids)

            # Rules for acceptance
            #  if its delegated its accepted into its own local KEL even if the
            #    delegator has not sealed it
            if not hab.accepted and not habord.pid:
                raise kering.ConfigurationError(f"Problem loading Hab pre="
                                                f"{pre} name={name} from db.")

            # read in config file and process any oobis or endpoints for hab
            hab.reconfigure()
            hab.inited = True
            self.habs[hab.pre] = hab
            if habord.pid:
                groups.append(habord)

        # Populate the participant hab after loading all habs
        for habord in groups:
            self.habs[habord.prefix].phab = self.habs[habord.pid]

        self.reconfigure()  # post hab load reconfiguration

    def makeHab(self, name, **kwa):
        """Make new Hab with name, pre is generated from **kwa

        Parameters: (Passthrough to hab.make)
            secrecies (list): of list of secrets to preload key pairs if any
            iridx (int): initial rotation index after ingestion of secrecies
            code (str): prefix derivation code
            transferable (bool): True means pre is transferable (default)
                    False means pre is nontransferable
            isith (Union[int, str, list]): incepting signing threshold as int, str hex, or list
            icount (int): incepting key count for number of keys
            nsith (Union[int, str, list]): next signing threshold as int, str hex or list
            ncount (int): next key count for number of next keys
            toad (Union[int,str]): int or str hex of witness threshold
            wits (list): of qb64 prefixes of witnesses
            delpre (str): qb64 of delegator identifier prefix
            estOnly (str): eventing.TraitCodex.EstOnly means only establishment
                events allowed in KEL for this Hab
        """
        hab = Hab(ks=self.ks, db=self.db, cf=self.cf, mgr=self.mgr,
                  rtr=self.rtr, rvy=self.rvy, kvy=self.kvy, psr=self.psr,
                  name=name, temp=self.temp)

        hab.make(**kwa)
        self.habs[hab.pre] = hab

        return hab

    def makeGroupHab(self, group, phab, **kwa):
        """Make new Group Hab with name using pre from hab as local identifier, pre is generated from **kwa

        Parameters: (Passthrough to hab.make)
            group (str): human readable alias for group identfier
            hab (Hab): Habititat of local identifier to use as participant in group
            secrecies (list): of list of secrets to preload key pairs if any
            iridx (int): initial rotation index after ingestion of secrecies
            code (str): prefix derivation code
            transferable (bool): True means pre is transferable (default)
                    False means pre is nontransferable
            isith (Union[int, str, list]): incepting signing threshold as int, str hex, or list
            icount (int): incepting key count for number of keys
            nsith (Union[int, str, list]): next signing threshold as int, str hex or list
            ncount (int): next key count for number of next keys
            toad (Union[int,str]): int or str hex of witness threshold
            wits (list): of qb64 prefixes of witnesses
            delpre (str): qb64 of delegator identifier prefix
            estOnly (str): eventing.TraitCodex.EstOnly means only establishment
                events allowed in KEL for this Hab
        """
        aids = list(kwa['aids'])
        del kwa['aids']
        if phab.pre not in aids:
            raise kering.ConfigurationError("Local identifer must be member of aids ={}"
                                            .format(aids))

        for aid in aids:
            if aid not in self.kevers:
                raise kering.ConfigurationError(f"Identifer {aid} not recognized from group aids ={aids}")

        mskeys, msdigers = self.extractKeysDigs(aids)
        kwa["mskeys"] = mskeys
        kwa["msdigers"] = msdigers

        hab = Hab(ks=self.ks, db=self.db, cf=self.cf, mgr=self.mgr,
                  rtr=self.rtr, rvy=self.rvy, kvy=self.kvy, psr=self.psr,
                  name=group, phab=phab, aids=aids, temp=self.temp)

        hab.make(**kwa)
        self.habs[hab.pre] = hab

        return hab

    def extractKeysDigs(self, aids):
        """
        Extract the public key and next digest from the current est event of the other
        participants in the multisig group.

        Parameters:
            aids(list): qb64 identifier prefix of all participants of the multisig group

        """
        mskeys = []
        msdigers = []
        for aid in aids:
            kever = self.kevers[aid]
            keys = kever.verfers
            if len(keys) > 1:
                raise kering.ConfigurationError("Identifier must have only one key, {} has {}"
                                                .format(aid, len(keys)))
            nkeys = kever.nexter.digs
            if len(nkeys) > 1:
                raise kering.ConfigurationError("Identifier must have only one nexy key commitment, {} has {}"
                                                .format(aid, len(nkeys)))

            diger = coring.Diger(qb64=nkeys[0])

            mskeys.append(keys[0])
            msdigers.append(diger)

        return mskeys, msdigers

    def close(self, clear=False):
        """Close resources.
        Parameters:
           clear is boolean, True means clear resource directories
        """
        if self.ks:
            self.ks.close(clear=self.ks.temp or clear)

        if self.db:
            self.db.close(clear=self.db.temp or clear)

        if self.cf:
            self.cf.close(clear=self.cf.temp or clear)

    def resolveVerifiers(self, pre=None, sn=0, dig=None):
        """
        Returns the Tholder and Verfers for the provided identifier prefix.
        Default pre is own .pre

        Parameters:
            pre(str) is qb64 str of bytes of identifier prefix.
            sn(int) is the sequence number of the est event
            dig(str) is qb64 str of digest of est event

        """

        prefixer = coring.Prefixer(qb64=pre)
        if prefixer.transferable:
            # receipted event and receipter in database so get receipter est evt
            # retrieve dig of last event at sn of est evt of receipter.
            sdig = self.db.getKeLast(key=snKey(pre=prefixer.qb64b,
                                               sn=sn))
            if sdig is None:
                # receipter's est event not yet in receipters's KEL
                raise ValidationError("key event sn {} for pre {} is not yet in KEL"
                                      "".format(sn, pre))
            # retrieve last event itself of receipter est evt from sdig
            sraw = self.db.getEvt(key=dgKey(pre=prefixer.qb64b, dig=bytes(sdig)))
            # assumes db ensures that sraw must not be none because sdig was in KE
            sserder = Serder(raw=bytes(sraw))
            if dig is not None and not sserder.compare(said=dig):  # endorser's dig not match event
                raise ValidationError("Bad proof sig group at sn = {}"
                                      " for ksn = {}."
                                      "".format(sn, sserder.ked))

            verfers = sserder.verfers
            tholder = sserder.tholder

        else:
            verfers = [coring.Verfer(qb64=pre)]
            tholder = coring.Tholder(sith="1")

        return tholder, verfers

    @property
    def kevers(self):
        """
        Returns .db.kevers of all Kevers
        """
        return self.db.kevers

    @property
    def prefixes(self):
        """
        Returns .db.prefixes of local prefixes
        """
        return self.db.prefixes

    def habByName(self, name):
        """
        Returns:
            hab (Hab): instance from .habs by name if any otherwise None

        Parameters:
           name (str): alias of Hab

        """
        if (habord := self.db.habs.get(name)) is not None:
            return self.habs[habord.prefix] if habord.prefix in self.habs else None
        return None

    def reconfigure(self):
        """Apply configuration from config file managed by .cf. to this Habery
        Process any oobis or endpoints

        conf
        {
          dt: "isodatetime",
          curls: ["tcp://localhost:5620/"],
          iurls: ["tcp://localhost:5621/?name=eve"],
        }

        Config file is meant to be read only at init not changed by app at
        run time. Any dynamic app changes must go in database not config file
        that way we don't have to worry about multiple writers of cf.
        Use config file to preload database not as a database. Config file may
        have named sections for Habery or individual Habs as needed.

        """
        conf = self.cf.get()
        if "dt" in conf:  # datetime of config file
            dt = help.fromIso8601(conf["dt"])  # raises error if not convert
            if "iurls" in conf:  # process OOBI URLs
                for oobi in conf["iurls"]:
                    obr = basing.OobiRecord(date=help.toIso8601(dt))
                    self.db.oobis.put(keys=(oobi,), val=obr)
            if "durls" in conf:  # process OOBI URLs
                for oobi in conf["durls"]:
                    obr = basing.OobiRecord(date=help.toIso8601(dt))
                    self.db.oobis.put(keys=(oobi,), val=obr)


class HaberyDoer(doing.Doer):
    """
    Basic Habery Doer  to initialize habery databases and config file.
    .cf, .ks, .db

    Inherited Attributes:
        .done is Boolean completion state:
            True means completed
            Otherwise incomplete. Incompletion maybe due to close or abort.

    Attributes:
        .habery is Habery subclass

    Inherited Properties:
        .tyme is float relative cycle time of associated Tymist .tyme obtained
            via injected .tymth function wrapper closure.
        .tymth is function wrapper closure returned by Tymist .tymeth() method.
            When .tymth is called it returns associated Tymist .tyme.
            .tymth provides injected dependency on Tymist tyme base.
        .tock is float, desired time in seconds between runs or until next run,
                 non negative, zero means run asap

    Properties:

    Methods:
        .wind  injects ._tymth dependency from associated Tymist to get its .tyme
        .__call__ makes instance callable
            Appears as generator function that returns generator
        .do is generator method that returns generator
        .enter is enter context action method
        .recur is recur context action method or generator method
        .exit is exit context method
        .close is close context method
        .abort is abort context method

    Hidden:
        ._tymth is injected function wrapper closure returned by .tymen() of
            associated Tymist instance that returns Tymist .tyme. when called.
        ._tock is hidden attribute for .tock property
    """

    def __init__(self, habery, **kwa):
        """
        Parameters:
           habery (Habery): instance
        """
        super(HaberyDoer, self).__init__(**kwa)
        self.habery = habery

    def enter(self):
        """ Enter context and set up Habery """
        if not self.habery.inited:
            self.habery.setup(**self.habery._inits)

    def exit(self):
        """Exit context and close Habery """
        if self.habery.inited and self.habery.free:

            self.habery.close(clear=self.habery.temp)


class Hab:
    """
    Hab class provides a given idetnifier controller's local resource environment
    i.e. hab or habitat. Includes dependency injection of database, keystore,
    configuration file as well as Kevery and key store Manager..

    Attributes: (Injected)
        ks (keeping.Keeper): lmdb key store
        db (basing.Baser): lmdb data base for KEL etc
        cf (configing.Configer): config file instance
        mgr (keeping.Manager): creates and rotates keys in key store
        rtr (routing.Router): routes reply 'rpy' messages
        rvy (routing.Revery): factory that processes reply 'rpy' messages
        kvy (eventing.Kevery): factory for local processing of local event msgs
        psr (parsing.Parser):  parses local messages for .kvy .rvy

     Attributes:
        name (str): alias of controller
        pre (str): qb64 prefix of own local controller or None if new
        temp (bool):
        inited (bool): True means fully initialized wrt databases.
                          False means not yet fully initialized

    Properties:
        kever (Kever): instance of key state of local controller
        kevers (dict): of eventing.Kever(s) keyed by qb64 prefix
        iserder (coring.Serder): own inception event
        prefixes (OrderedSet): local prefixes for .db
        accepted (bool): True means accepted into local KEL.
                          False otherwise

    """

    def __init__(self, ks, db, cf, mgr, rtr, rvy, kvy, psr, *,
                 name='test', pre=None, phab=None, aids=None, temp=False):
        """
        Initialize instance.

        Parameters:  (injected dependencies)
            ks (keeping.Keeper): lmdb key store
            db (basing.Baser): lmdb data base for KEL etc
            cf (configing.Configer): config file instance
            mgr (keeping.Manager): creates and rotates keys in key store
            rtr (routing.Router): routes reply 'rpy' messages
            rvy (routing.Revery): factory that processes reply 'rpy' messages
            kvy (eventing.Kevery): factory for local processing of local event msgs
            psr (parsing.Parser):  parses local messages for .kvy .rvy

        Parameters:
            name (str): alias name for local controller of habitat
            pre (str): qb64 identifier prefix of own local controller else None
            phab (Hab): Group participant hab if this is a group multisig identifier
            temp (bool): True means testing:
                use weak level when salty algo for stretching in key creation
                for incept and rotate of keys for this hab.pre



        """
        self.db = db  # injected
        self.ks = ks  # injected
        self.cf = cf  # injected
        self.mgr = mgr  # injected
        self.rtr = rtr  # injected
        self.rvy = rvy  # injected
        self.kvy = kvy  # injected
        self.psr = psr  # injected
        self.phab = phab  # injected group participant Hab
        self.aids = aids  # injected group participant aids

        self.name = name
        self.pre = pre  # wait to setup until after db is known to be opened
        self.temp = True if temp else False

        self.inited = False

        self.delpre = None

    def make(self, *, secrecies=None, iridx=0, code=coring.MtrDex.Blake3_256,
             transferable=True, isith=None, icount=1,
             nsith=None, ncount=None,
             toad=None, wits=None, delpre=None, estOnly=False, mskeys=None, msdigers=None):
        """
        Finish setting up or making Hab from parameters.
        Assumes injected dependencies were already setup.

        Parameters:
            secrecies (list): of list of secrets to preload key pairs if any
            iridx (int): initial rotation index after ingestion of secrecies
            code (str): prefix derivation code
            transferable (bool): True means pre is transferable (default)
                    False means pre is nontransferable
            isith (Union[int, str, list]): incepting signing threshold as int, str hex, or list
            icount (int): incepting key count for number of keys
            nsith (Union[int, str, list]): next signing threshold as int, str hex or list
            ncount (int): next key count for number of next keys
            toad (Union[int,str]): int or str hex of witness threshold
            wits (list): of qb64 prefixes of witnesses
            delpre (str): qb64 of delegator identifier prefix
            estOnly (str): eventing.TraitCodex.EstOnly means only establishment
                events allowed in KEL for this Hab
            mskeys (list): Verfers of public keys collected from inception of participants in group identifier
            msdigers (list): Digers of next public keys collected from inception of participants in group identifier

        """
        if not (self.ks.opened and self.db.opened and self.cf.opened):
            raise kering.ClosedError("Attempt to make Hab with unopened "
                                     "resources.")
        if nsith is None:
            nsith = isith
        if ncount is None:
            ncount = icount
        if not transferable:
            ncount = 0  # next count
            nsith = 0
            code = coring.MtrDex.Ed25519N

        if mskeys:
            verfers = mskeys
            digers = msdigers
            cst = coring.Tholder(sith=isith).sith  # current signing threshold
            nst = coring.Tholder(sith=nsith).sith  # next signing threshold

        elif secrecies:
            ipre, _ = self.mgr.ingest(secrecies,
                                      iridx=iridx,
                                      ncount=ncount,
                                      stem=self.name,
                                      transferable=transferable,
                                      temp=self.temp)
            verfers, digers, cst, nst = self.mgr.replay(pre=ipre, advance=False)
        else:
            verfers, digers, cst, nst = self.mgr.incept(icount=icount,
                                                        isith=isith,
                                                        ncount=ncount,
                                                        nsith=nsith,
                                                        stem=self.name,
                                                        transferable=transferable,
                                                        temp=self.temp)

        opre = verfers[0].qb64  # default original pre from key store move below

        cnfg = []
        if estOnly:
            cnfg.append(eventing.TraitCodex.EstOnly)

        self.delpre = delpre
        keys = [verfer.qb64 for verfer in verfers]
        if self.delpre:
            serder = eventing.delcept(keys=keys,
                                      delpre=self.delpre,
                                      sith=cst,
                                      nsith=nst,
                                      nkeys=[diger.qb64 for diger in digers],
                                      toad=toad,
                                      wits=wits,
                                      cnfg=cnfg,)
        else:
            serder = eventing.incept(keys=keys,
                                     sith=cst,
                                     nsith=nst,
                                     nkeys=[diger.qb64 for diger in digers],
                                     toad=toad,
                                     wits=wits,
                                     cnfg=cnfg,
                                     code=code)

        self.pre = serder.ked["i"]  # new pre
        if not mskeys:
            self.mgr.move(old=opre, new=self.pre)  # move index to incept event pre

        # may want db method that updates .habs. and .prefixes together
        habord = basing.HabitatRecord(prefix=self.pre, pid=None, aids=self.aids)
        if self.phab:
            habord.pid = self.phab.pre
        self.db.habs.put(keys=self.name,
                         val=habord)
        self.prefixes.add(self.pre)

        # create inception event
        if self.phab:
            idx = keys.index(self.phab.kever.verfers[0].qb64)
            sigers = self.phab.mgr.sign(ser=serder.raw, verfers=self.phab.kever.verfers, indices=[idx])
        else:
            sigers = self.mgr.sign(ser=serder.raw, verfers=verfers)

        # during delegation initialization of a habitat we ignore the MissingDelegationError and
        # MissingSignatureError
        try:
            self.kvy.processEvent(serder=serder, sigers=sigers)
        except MissingSignatureError:
            pass
        except Exception as ex:
            raise kering.ConfigurationError("Improper Habitat inception for "
                                            "pre={} {}".format(self.pre, ex))

        # read in self.cf config file and process any oobis or endpoints
        self.reconfigure()  # should we do this for new Habs not loaded from db

        self.inited = True

    def reconfigure(self):
        """Apply configuration from config file managed by .cf. to this Hab.
        Assumes that .pre and signing keys have been setup in order to create
        own endpoint auth when provided in .cf.

        conf
        {
          dt: "isodatetime",
          curls: ["tcp://localhost:5620/"],
          iurls: ["tcp://localhost:5621/?name=eve"],
        }

        Config file is meant to be read only at init not changed by app at
        run time. Any dynamic app changes must go in database not config file
        that way we don't have to worry about multiple writers of cf.
        Use config file to preload database not as a database. Config file may
        have named sections for Habery or individual Habs as needed.
        """

        conf = self.cf.get()
        if "dt" in conf:  # datetime of config file
            dt = help.fromIso8601(conf["dt"])  # raises error if not convert
            msgs = bytearray()
            msgs.extend(self.makeEndRole(eid=self.pre,
                                         role=kering.Roles.controller,
                                         stamp=help.toIso8601(dt=dt)))
            if "curls" in conf:
                curls = conf["curls"]
                for url in curls:
                    splits = urlsplit(url)
                    scheme = (splits.scheme if splits.scheme in kering.Schemes
                              else kering.Schemes.http)
                    msgs.extend(self.makeLocScheme(url=url,
                                                   scheme=scheme,
                                                   stamp=help.toIso8601(dt=dt)))
            self.psr.parse(ims=msgs)

    def recreate(self, serder, opre, verfers):
        """ Recreate the Hab with new identifier prefix.

        """

        self.pre = serder.ked["i"]  # new pre
        self.mgr.move(old=opre, new=self.pre)

        habr = self.db.habs.get(self.name)
        # may want db method that updates .habs. and .prefixes together
        self.db.habs.pin(keys=self.name,
                         val=basing.HabitatRecord(prefix=self.pre, watchers=habr.watchers, pid=None, aids=None))
        self.prefixes.add(self.pre)

        # self.kvy = eventing.Kevery(db=self.db, lax=False, local=True)
        # create inception event
        sigers = self.mgr.sign(ser=serder.raw, verfers=verfers)
        self.kvy.processEvent(serder=serder, sigers=sigers)
        # self.psr = parsing.Parser(framed=True, kvy=self.kvy)
        if self.pre not in self.kevers:
            raise kering.ConfigurationError("Improper Habitat inception for "
                                            "pre={}.".format(self.pre))

    @property
    def iserder(self):
        """
        Return serder of inception event
        """
        if (dig := self.db.getKeLast(eventing.snKey(pre=self.pre, sn=0))) is None:
            raise kering.ConfigurationError("Missing inception event in KEL for "
                                            "Habitat pre={}.".format(self.pre))
        if (raw := self.db.getEvt(eventing.dgKey(pre=self.pre, dig=bytes(dig)))) is None:
            raise kering.ConfigurationError("Missing inception event for "
                                            "Habitat pre={}.".format(self.pre))
        return coring.Serder(raw=bytes(raw))

    @property
    def kevers(self):
        """
        Returns .db.kevers
        """
        return self.db.kevers

    @property
    def accepted(self):
        return self.pre in self.kevers

    @property
    def kever(self):
        """
        Returns kever for its .pre
        """
        return self.kevers[self.pre] if self.accepted else None

    @property
    def prefixes(self):
        """
        Returns .db.prefixes
        """
        return self.db.prefixes

    def group(self):
        return self.aids

    def sign(self, ser, verfers=None, pubs=None, indexed=True):
        if self.phab:
            keys = [verfer.qb64 for verfer in self.kever.verfers]
            idx = keys.index(self.phab.kever.verfers[0].qb64)
            return self.phab.mgr.sign(ser, pubs=pubs, verfers=self.phab.kever.verfers, indexed=indexed, indices=[idx])
        else:
            if verfers is None:
                verfers = self.kever.verfers
            return self.mgr.sign(ser, pubs=pubs, verfers=verfers, indexed=indexed)

    def rotate(self, sith=None, nsith=None, count=None, toad=None, cuts=None, adds=None,
               data=None, mskeys=None, msdigers=None):
        """
        Perform rotation operation. Register rotation in database.
        Returns: bytearrayrotation message with attached signatures.

        Parameters:
            sith (Optional[int,str]) next signing threshold as int or str hex or list of str weights
            nsith (Optional[int,str]) next, next signing threshold as int or str hex or list of str weights
            count (int) next number of signing keys
            toad (Optional[int,str]) hex of witness threshold after cuts and adds
            cuts (list) of qb64 pre of witnesses to be removed from witness list
            adds (list) of qb64 pre of witnesses to be added to witness list
            data (list) of dicts of committed data such as seals
            mskeys (list): Verfers of public keys collected from inception of participants in group identifier
            msdigers (list): Digers of next public keys collected from inception of participants in group identifier

        """
        kever = self.kever  # kever.pre == self.pre
        if sith is None:
            sith = kever.tholder.sith  # use previous sith
        if nsith is None:
            nsith = kever.ntholder.sith
        if count is None:
            count = len(kever.verfers)  # use previous count

        if mskeys:
            verfers = mskeys
            digers = msdigers
            cst = coring.Tholder(sith=sith).sith  # current signing threshold
            nst = coring.Tholder(sith=nsith).sith  # next signing threshold
        else:
            try:
                verfers, digers, cst, nst = self.mgr.replay(pre=self.pre)
            except IndexError:
                verfers, digers, cst, nst = self.mgr.rotate(pre=self.pre,
                                                            count=count,  # old next is new current
                                                            sith=sith,
                                                            temp=self.temp)

        keys = [verfer.qb64 for verfer in verfers]
        # this is wrong sith is not kever.tholder.sith as next was different
        if kever.delegator is not None:
            serder = eventing.deltate(pre=kever.prefixer.qb64,
                                      keys=[verfer.qb64 for verfer in verfers],
                                      dig=kever.serder.saider.qb64,
                                      sn=kever.sn + 1,
                                      sith=cst,
                                      nsith=nst,
                                      nkeys=[diger.qb64 for diger in digers],
                                      toad=toad,
                                      wits=kever.wits,
                                      cuts=cuts,
                                      adds=adds,
                                      data=data)
        else:
            serder = eventing.rotate(pre=kever.prefixer.qb64,
                                     keys=[verfer.qb64 for verfer in verfers],
                                     dig=kever.serder.saider.qb64,
                                     sn=kever.sn + 1,
                                     sith=cst,
                                     nsith=nst,
                                     nkeys=[diger.qb64 for diger in digers],
                                     toad=toad,
                                     wits=kever.wits,
                                     cuts=cuts,
                                     adds=adds,
                                     data=data)

        if self.phab:
            idx = keys.index(self.phab.kever.verfers[0].qb64)
            sigers = self.phab.mgr.sign(ser=serder.raw, verfers=self.phab.kever.verfers, indices=[idx])
        else:
            sigers = self.sign(ser=serder.raw, verfers=verfers)

        # update own key event verifier state
        msg = eventing.messagize(serder, sigers=sigers)

        try:
            self.kvy.processEvent(serder=serder, sigers=sigers)
        except MissingSignatureError:
            pass
        except Exception as e:
            raise kering.ValidationError("Improper Habitat rotation for "
                                         "pre={}.".format(self.pre))

        return msg

    def interact(self, data=None):
        """
        Perform interaction operation. Register interaction in database.
        Returns: bytearray interaction message with attached signatures.
        """
        kever = self.kever
        serder = eventing.interact(pre=kever.prefixer.qb64,
                                   dig=kever.serder.saider.qb64,
                                   sn=kever.sn + 1,
                                   data=data)

        sigers = self.sign(ser=serder.raw)
        # update own key event verifier state

        # seal = data if isinstance(data, eventing.SealEvent) else None
        # self.psr.parseOne(ims=bytearray(msg))  # make copy as kvy deletes
        # if kever.serder.said != serder.said:
        #     raise kering.ValidationError("Improper Habitat interaction for "
        #                                  "pre={}.".format(self.pre))

        msg = eventing.messagize(serder, sigers=sigers)
        try:
            self.kvy.processEvent(serder=serder, sigers=sigers)
        except MissingSignatureError:
            pass
        except Exception:
            raise kering.ValidationError("Improper Habitat rotation for "
                                         "pre={}.".format(self.pre))

        return msg

    def query(self, pre, src, query=None, **kwa):
        """ Create, sign and return a `qry` message against the attester for the prefix

        Parameters:
            pre (str): qb64 identifier prefix being queried for
            src (str): qb64 identifier prefix of attester being queried
            query (dict): addition query modifiers to include in `q`
            **kwa (dict): keyword arguments passed to eventing.query

        Returns:
            bytearray: signed query event

        """

        query = query if query is not None else dict()
        query['i'] = pre
        query["src"] = src
        serder = eventing.query(query=query, **kwa)

        return self.endorse(serder, last=True)

    def receipt(self, serder):
        """
        Returns own receipt, rct, message of serder with count code and receipt
        couples (pre+cig)
        Builds msg and then processes it into own db to validate
        """
        ked = serder.ked
        reserder = eventing.receipt(pre=ked["i"],
                                    sn=int(ked["s"], 16),
                                    said=serder.said)

        # sign serder event
        if self.kever.prefixer.transferable:
            seal = eventing.SealEvent(i=self.pre,
                                      s="{:x}".format(self.kever.lastEst.s),
                                      d=self.kever.lastEst.d)
            sigers = self.sign(ser=serder.raw,
                               indexed=True)
            msg = eventing.messagize(serder=reserder, sigers=sigers, seal=seal)
        else:
            cigars = self.sign(ser=serder.raw,
                               indexed=False)
            msg = eventing.messagize(reserder, cigars=cigars)

        self.psr.parseOne(ims=bytearray(msg))  # process local copy into db
        return msg

    def witness(self, serder):
        """
        Returns own receipt, rct, message of serder with count code and witness
        indexed receipt signatures if key state of serder.pre shows that own pre
        is a current witness of event in serder
        """
        if self.kever.prefixer.transferable:  # not non-transferable prefix
            raise ValueError("Attempt to create witness receipt with"
                             " transferable pre={}.".format(self.pre))
        ked = serder.ked

        if serder.pre not in self.kevers:
            raise ValueError("Attempt by {} to witness event with missing key "
                             "state.".format(self.pre))
        kever = self.kevers[serder.pre]
        if self.pre not in kever.wits:
            print("Attempt by {} to witness event of {} when not a "
                             "witness in wits={}.".format(self.pre,
                                                          serder.pre,
                                                         kever.wits))
        print("I am", self.pre, "wits", kever.wits)
        index = kever.wits.index(self.pre)

        reserder = eventing.receipt(pre=ked["i"],
                                    sn=int(ked["s"], 16),
                                    said=serder.said)
        # sign serder event
        wigers = self.mgr.sign(ser=serder.raw,
                               pubs=[self.pre],
                               indices=[index])

        msg = eventing.messagize(reserder, wigers=wigers, pipelined=True)
        self.psr.parseOne(ims=bytearray(msg))  # process local copy into db
        return msg

    def endorse(self, serder, last=False, pipelined=True):
        """
        Returns msg with own endorsement of msg from serder with attached signature
        groups based on own pre transferable or non-transferable.

        Parameters:
            serder (Serder): instance of msg
            last (bool): True means use SealLast. False means use SealEvent
                         query messages use SealLast
            pipelined (bool): True means use pipelining attachment code

        Useful for endorsing message when provided via serder such as state,
        reply, query or similar.
        """
        if self.kever.prefixer.transferable:
            # create SealEvent or SealLast for endorser's est evt whose keys are
            # used to sign
            if not self.phab:
                kever = self.kever
            else:  # group so use gid kever
                kever = self.phab.kever

            if last:
                seal = eventing.SealLast(i=kever.prefixer.qb64)
            else:
                seal = eventing.SealEvent(i=kever.prefixer.qb64,
                                          s=hex(kever.lastEst.s),
                                          d=kever.lastEst.d)

            sigers = self.sign(ser=serder.raw,
                               indexed=True)

            msg = eventing.messagize(serder=serder,
                                     sigers=sigers,
                                     seal=seal,
                                     pipelined=pipelined)

        else:
            cigars = self.sign(ser=serder.raw,
                               indexed=False)
            msg = eventing.messagize(serder=serder,
                                     cigars=cigars,
                                     pipelined=pipelined)

        return msg

    def replay(self, pre=None, fn=0):
        """
        Returns replay of FEL first seen event log for pre starting from fn
        Default pre is own .pre

        Parameters:
            pre is qb64 str or bytes of identifier prefix.
                default is own .pre
            fn is int first seen ordering number

        """
        if not pre:
            pre = self.pre
        msgs = bytearray()
        for msg in self.db.clonePreIter(pre=pre, fn=fn):
            msgs.extend(msg)
        return msgs

    def replayAll(self, key=b''):
        """
        Returns replay of FEL first seen event log for all pre starting at key

        Parameters:
            key (bytes): fnKey(pre, fn)

        """
        msgs = bytearray()
        for msg in self.db.cloneAllPreIter(key=key):
            msgs.extend(msg)
        return msgs

    def makeOtherEvent(self, pre, sn):
        """
        Returns: messagized bytearray message with attached signatures of
                 own event at sequence number sn from retrieving event at sn
                 and associated signatures from database.

        Parameters:
            sn is int sequence number of event
        """
        if pre not in self.kevers:
            return None

        msg = bytearray()
        dig = self.db.getKeLast(dbing.snKey(pre, sn))
        if dig is None:
            raise kering.MissingEntryError("Missing event for pre={} at sn={}."
                                           "".format(pre, sn))
        dig = bytes(dig)
        key = dbing.dgKey(pre, dig)  # digest key
        msg.extend(self.db.getEvt(key))
        msg.extend(coring.Counter(code=coring.CtrDex.ControllerIdxSigs,
                                  count=self.db.cntSigs(key)).qb64b)  # attach cnt
        for sig in self.db.getSigsIter(key):
            msg.extend(sig)  # attach sig
        return msg

    def fetchEnd(self, cid: str, role: str, eid: str):
        """
        Returns:
            endpoint (basing.EndpointRecord): instance or None
        """
        return self.db.ends.get(keys=(cid, role, eid))

    def fetchLoc(self, eid: str, scheme: str = kering.Schemes.http):
        """
        Returns:
            location (basing.LocationRecord): instance or None
        """
        return self.db.locs.get(keys=(eid, scheme))

    def fetchEndAllowed(self, cid: str, role: str, eid: str):
        """
        Returns:
            allowed (bool): True if eid is allowed as endpoint provider for cid
                          in role. False otherwise.
        Parameters:
            cid (str): identifier prefix qb64 of controller authZ endpoint provided
                       eid in role
            role (str): endpoint role such as (controller, witness, watcher, etc)
            eid (str): identifier prefix qb64 of endpoint provider in role
        """
        end = self.db.ends.get(keys=(cid, role, eid))
        return end.allowed if end else None

    def fetchEndEnabled(self, cid: str, role: str, eid: str):
        """
        Returns:
            allowed (bool): True if eid is allowed as endpoint provider for cid
                          in role. False otherwise.
        Parameters:
            cid (str): identifier prefix qb64 of controller authZ endpoint provided
                       eid in role
            role (str): endpoint role such as (controller, witness, watcher, etc)
            eid (str): identifier prefix qb64 of endpoint provider in role
        """
        end = self.db.ends.get(keys=(cid, role, eid))
        return end.enabled if end else None

    def fetchEndAuthzed(self, cid: str, role: str, eid: str):
        """
        Returns:
            allowed (bool): True if eid is allowed as endpoint provider for cid
                          in role. False otherwise.
        Parameters:
            cid (str): identifier prefix qb64 of controller authZ endpoint provided
                       eid in role
            role (str): endpoint role such as (controller, witness, watcher, etc)
            eid (str): identifier prefix qb64 of endpoint provider in role
        """
        end = self.db.ends.get(keys=(cid, role, eid))
        return (end.enabled or end.allowed) if end else None

    def fetchUrl(self, eid: str, scheme: str = kering.Schemes.http):
        """
        Returns:
            url (str): for endpoint provider given by eid
                       empty string when url is nullified
                       None when no location record
        """
        loc = self.db.locs.get(keys=(eid, scheme))
        return loc.url if loc else loc

    def fetchUrls(self, eid: str, scheme: str = ""):
        """
        Returns:
           surls (hicting.Mict): urls keyed by scheme for given eid. Assumes that
                user independently verifies that the eid is allowed for a
                given cid and role. If url is empty then does not return

        Parameters:
            eid (str): identifier prefix qb64 of endpoint provider
            scheme (str): url scheme
        """
        return hicting.Mict([(keys[1], loc.url) for keys, loc in
                             self.db.locs.getItemIter(keys=(eid, scheme)) if loc.url])

    def fetchRoleUrls(self, cid: str, *, role: str = "", scheme: str = "",
                      eids=None, enabled: bool = True, allowed: bool = True):
        """
        Returns:
           rurls (hicting.Mict):  of nested dicts. The top level dict rurls is keyed by
                        role for a given cid. Each value in rurls is eurls dict
                        keyed by the eid of authorized endpoint provider and
                        each value in eurls is a surls dict keyed by scheme

        Parameters:
            cid (str): identifier prefix qb64 of controller authZ endpoint provided
                       eid in role
            role (str): endpoint role such as (controller, witness, watcher, etc)
            scheme (str): url scheme
            eids (list): when provided restrict returns to only eids in eids
            enabled (bool): True means fetch any allowed witnesses as well
            allowed (bool): True means fetech any enabled witnesses as well
        """
        if eids is None:
            eids = []

        rurls = hicting.Mict()

        if role == kering.Roles.witness:
            if kever := self.kevers[cid] if cid in self.kevers else None:
                # latest key state for cid
                for eid in kever.wits:
                    if not eids or eid in eids:
                        surls = self.fetchUrls(eid, scheme=scheme)
                        if surls:
                            rurls.add(kering.Roles.witness,
                                      hicting.Mict([(eid, surls)]))

        for (_, erole, eid), end in self.db.ends.getItemIter(keys=(cid, role)):
            if (enabled and end.enabled) or (allowed and end.allowed):
                if not eids or eid in eids:
                    surls = self.fetchUrls(eid, scheme=scheme)
                    if surls:
                        rurls.add(erole, hicting.Mict([(eid, surls)]))
        return rurls

    def fetchWitnessUrls(self, cid: str, scheme: str = "", eids=None,
                         enabled: bool = True, allowed: bool = True):
        """
        Fetch witness urls for witnesses of cid at latest key state or enabled or
        allowed witnesses if not a witness at latest key state.

        Returns:
           rurls (hicting.Mict):  of nested dicts. The top level dict rurls is keyed by
                        role for a given cid. Each value in rurls is eurls dict
                        dict keyed by the eid of authorized endpoint provider and
                        each value in eurls is a surls dict keyed by scheme

        Parameters:
            cid (str): identifier prefix qb64 of controller authZ endpoint provided
                       eid is witness
            scheme (str): url scheme
            eids (list): when provided restrict returns to only eids in eids
            enabled (bool): True means fetch any allowed witnesses as well
            allowed (bool): True means fetech any enabled witnesses as well
        """
        return (self.fetchRoleUrls(cid=cid,
                                   role=kering.Roles.witness,
                                   scheme=scheme,
                                   eids=eids,
                                   enabled=enabled,
                                   allowed=allowed))

    def reply(self, **kwa):
        """
        Returns:
            msg (bytearray): reply message

        Parameters:
            route is route path string that indicates data flow handler (behavior)
                to processs the reply
            data is list of dicts of comitted data such as seals
            dts is date-time-stamp of message at time or creation
            version is Version instance
            kind is serialization kind
        """
        return self.endorse(eventing.reply(**kwa))

    def makeEndRole(self, eid, role=kering.Roles.controller, allow=True, stamp=None):
        """
        Returns:
            msg (bytearray): reply message allowing/disallowing endpoint provider
               eid in role

        Parameters:
            eid (str): qb64 of endpoint provider to be authorized
            role (str): authorized role for eid
            allow (bool): True means add eid at role as authorized
                          False means cut eid at role as unauthorized
            stamp (str): date-time-stamp RFC-3339 profile of iso8601 datetime.
                          None means use now.
        """
        data = dict(cid=self.pre, role=role, eid=eid)
        route = "/end/role/add" if allow else "/end/role/cut"
        return self.reply(route=route, data=data, stamp=stamp)

    def makeLocScheme(self, url, scheme="http", stamp=None):
        """
        Returns:
           msg (bytearray): reply message of own url service endpoint at scheme

        Parameters:
            url (str): url of endpoint, may have scheme missing or not
                       If url is empty then nullifies location
            scheme (str): url scheme must matche scheme in url if any
            stamp (str): date-time-stamp RFC-3339 profile of iso8601 datetime.
                          None means use now.

        """
        data = dict(eid=self.pre, scheme=scheme, url=url)
        return self.reply(route="/loc/scheme", data=data, stamp=stamp)

    def replyLocScheme(self, eid, scheme=None):
        """
        Returns a reply message stream composed of entries authed by the given
        eid from the appropriate reply database including associated attachments
        in order to disseminate (percolate) BADA reply data authentication proofs.

        Currently uses promiscuous model for permitting endpoint discovery.
        Future is to use identity constraint graph to constrain discovery
        of whom by whom.

        eid and not scheme then:
            loc url for all schemes at eid

        eid and scheme then:
            loc url for scheme at eid

        Parameters:
            eid (str): endpoint provider id
            scheme (str): url scheme
        """
        msgs = bytearray()

        urls = self.fetchUrls(eid=eid, scheme=scheme)
        for rscheme, url in urls.firsts():
            msgs.extend(self.makeLocScheme(url=url, scheme=rscheme))

        return msgs

    def replyEndRole(self, cid, role=None, eids=None, scheme=""):

        """
        Returns a reply message stream composed of entries authed by the given
        cid from the appropriate reply database including associated attachments
        in order to disseminate (percolate) BADA reply data authentication proofs.

        Currently uses promiscuous model for permitting endpoint discovery.
        Future is to use identity constraint graph to constrain discovery
        of whom by whom.

        cid and not role and not scheme then:
            end authz for all eids in all roles and loc url for all schemes at each eid
            if eids then only eids in eids else all eids

        cid and not role and scheme then:
            end authz for all eid in all roles and loc url for scheme at each eid
            if eids then only eids in eids else all eids

        cid and role and not scheme then:
            end authz for all eid in role and loc url for all schemes at each eid
            if eids then only eids in eids else all eids

        cid and role and scheme then:
            end authz for all eid in role and loc url for scheme at each eid
            if eids then only eids in eids else all eids


        Parameters:
            cid (str): identifier prefix qb64 of controller authZ endpoint provided
                       eid is witness
            role (str): authorized role for eid
            eids (list): when provided restrict returns to only eids in eids
            scheme (str): url scheme
        """
        msgs = bytearray()

        if eids is None:
            eids = []

        if role == kering.Roles.witness:
            if kever := self.kevers[cid] if cid in self.kevers else None:
                witness = self.pre in kever.wits  # see if we are cid's witness

                # latest key state for cid
                for eid in kever.wits:
                    if not eids or eid in eids:
                        msgs.extend(self.replyLocScheme(eid=eid, scheme=scheme))
                        if not witness:  # we are not witness, send auth records
                            msgs.extend(self.makeEndRole(eid=eid, role=role))
                if witness:  # we are witness, set KEL as authz
                    msgs.extend(self.replay(cid))

        for (_, erole, eid), end in self.db.ends.getItemIter(keys=(cid,)):
            if (end.enabled or end.allowed) and (not role or role == erole) and (not eids or eid in eids):
                msgs.extend(self.replyLocScheme(eid=eid, scheme=scheme))
                msgs.extend(self.makeEndRole(eid=eid, role=erole))

        return msgs

    def replyToOobi(self, aid, role, eids=None):
        """
        Returns a reply message stream composed of entries authed by the given
        aid from the appropriate reply database including associated attachments
        in order to disseminate (percolate) BADA reply data authentication proofs.

        Currently uses promiscuous model for permitting oobi initiated endpoint
        discovery. Future is to use identity constraint graph to constrain
        discovery of whom by whom.

        This method is entry point for initiating replies generated by
        .replyEndRole and/or .replyLocScheme

        Parameters:
            aid (str): qb64 of identifier in oobi, may be cid or eid
            role (str): authorized role for eid
            eids (list): when provided restrict returns to only eids in eids

        """
        # default logic is that if self.pre is witness of aid and has a loc url
        # for self then reply with loc scheme for all witnesses even if self
        # not permiteed in .habs.oobis
        return self.replyEndRole(cid=aid, role=role, eids=eids)

    def getOwnEvent(self, sn):
        """
        Returns: message Serder and controller signatures of
                 own event at sequence number sn from retrieving event at sn
                 and associated signatures from database.

        Parameters:
            sn is int sequence number of event
        """
        dig = self.db.getKeLast(dbing.snKey(self.pre, sn))
        if dig is None:
            raise kering.MissingEntryError("Missing event for pre={} at sn={}."
                                           "".format(self.pre, sn))
        dig = bytes(dig)
        key = dbing.dgKey(self.pre, dig)  # digest key
        msg = self.db.getEvt(key)
        serder = coring.Serder(raw=bytes(msg))

        sigs = []
        for sig in self.db.getSigsIter(key):
            sigs.append(coring.Siger(qb64b=bytes(sig)))

        couple = self.db.getAes(key)

        return serder, sigs, couple

    def makeOwnEvent(self, sn):
        """
        Returns: messagized bytearray message with attached signatures of
                 own event at sequence number sn from retrieving event at sn
                 and associated signatures from database.

        Parameters:
            sn is int sequence number of event
        """
        msg = bytearray()
        serder, sigs, couple = self.getOwnEvent(sn=sn)
        msg.extend(serder.raw)
        msg.extend(coring.Counter(code=coring.CtrDex.ControllerIdxSigs,
                                  count=len(sigs)).qb64b)  # attach cnt
        for sig in sigs:
            msg.extend(sig.qb64b)  # attach sig

        if couple is not None:
            msg.extend(coring.Counter(code=coring.CtrDex.SealSourceCouples,
                                      count=1).qb64b)
            msg.extend(couple)

        return msg

    def makeOwnInception(self):
        """
        Returns: messagized bytearray message with attached signatures of
                 own inception event by retrieving event and signatures
                 from database.
        """
        return self.makeOwnEvent(sn=0)

    def processCues(self, cues):
        """
        Returns bytearray of messages as a result of processing all cues

        Parameters:
           cues is deque of cues
        """
        msgs = bytearray()  # outgoing messages
        for msg in self.processCuesIter(cues):
            msgs.extend(msg)
        return msgs

    def processCuesIter(self, cues):
        """
        Iterate through cues and yields one or more msgs for each cue.

        Parameters:
            cues is deque of cues

        """
        while cues:  # iteratively process each cue in cues
            msgs = bytearray()
            cue = cues.popleft()
            cueKin = cue["kin"]  # type or kind of cue

            if cueKin in ("receipt",):  # cue to receipt a received event from other pre
                cuedSerder = cue["serder"]  # Serder of received event for other pre
                cuedKed = cuedSerder.ked
                cuedPrefixer = coring.Prefixer(qb64=cuedKed["i"])
                logger.info("%s got cue: kin=%s\n%s\n\n", self.pre, cueKin,
                            json.dumps(cuedKed, indent=1))

                if cuedKed["t"] == coring.Ilks.icp:
                    dgkey = dbing.dgKey(self.pre, self.iserder.said)
                    found = False
                    if cuedPrefixer.transferable:  # find if have rct from other pre for own icp
                        for quadruple in self.db.getVrcsIter(dgkey):
                            if bytes(quadruple).decode("utf-8").startswith(cuedKed["i"]):
                                found = True  # yes so don't send own inception
                    else:  # find if already rcts of own icp
                        for couple in self.db.getRctsIter(dgkey):
                            if bytes(couple).decode("utf-8").startswith(cuedKed["i"]):
                                found = True  # yes so don't send own inception

                    if not found:  # no receipt from remote so send own inception
                        # no vrcs or rct of own icp from remote so send own inception
                        msgs.extend(self.makeOwnInception())

                msgs.extend(self.receipt(cuedSerder))
                yield msgs

            elif cueKin in ("replay",):
                msgs = cue["msgs"]
                yield msgs

            elif cueKin in ("reply",):
                data = cue["data"]
                route = cue["route"]
                msg = self.reply(data=data, route=route)
                yield msg
